# Options for GnuPG
# Copyright 1998, 1999, 2000, 2001, 2002, 2003,
#           2010 Free Software Foundation, Inc.
# 
# This file is free software; as a special exception the author gives
# unlimited permission to copy and/or distribute it, with or without
# modifications, as long as this notice is preserved.
# 
# This file is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Unless you specify which option file to use (with the command line
# option "--options filename"), GnuPG uses the file ~/.gnupg/gpg.conf
# by default.
#
# An options file can contain any long options which are available in
# GnuPG. If the first non white space character of a line is a '#',
# this line is ignored.  Empty lines are also ignored.
#
# See the man page for a list of options.

# My default key
default-key 8632E1D006B8EFB1

# Get rid of the copyright notice
no-greeting

# Because some mailers change lines starting with "From " to ">From "
# it is good to handle such lines in a special way when creating
# cleartext signatures; all other PGP versions do it this way too.
no-escape-from-lines

# Use a modern charset
charset utf-8

### Show keys settings
# Always show long keyid
keyid-format 0xlong

# Always show the fingerprint
with-fingerprint


# Group names may be defined like this:
#   group mynames = paige 0x12345678 joe patti
#
# Any time "mynames" is a recipient (-r or --recipient), it will be
# expanded to the names "paige", "joe", and "patti", and the key ID
# "0x12345678".  Note there is only one level of expansion - you
# cannot make an group that points to another group.  Note also that
# if there are spaces in the recipient name, this will appear as two
# recipients.  In these cases it is better to use the key ID.


### KeyServer Options
# Keyserver URL
keyserver hkps://hkps.pool.sks-keyservers.net

# Automatically fetch keys as needed
keyserver-options auto-key-retrieve
# Set the CA certificate for hkps.pool.sks-keyservers.net
keyserver-options ca-cert-file=~/.dotfiles/gnupg/sks-keyservers.netCA.pem
# Prevents from using and insecure keyserver
keyserver-options no-honor-keyserver-url
# Don't leak DNS
keyserver-options no-try-dns-srv




# Display photo user IDs when a signature from a key with a photo is
# verified
verify-options show-photos

# Automatic key location
#
# GnuPG can automatically locate and retrieve keys as needed using the
# auto-key-locate option.  This happens when encrypting to an email
# address (in the "user@example.com" form), and there are no
# user@example.com keys on the local keyring.  This option takes the
# following arguments, in the order they are to be tried:
# 
# cert = locate a key using DNS CERT, as specified in RFC-4398.
#        GnuPG can handle both the PGP (key) and IPGP (URL + fingerprint)
#        CERT methods.
#
# pka = locate a key using DNS PKA.
#
# ldap = locate a key using the PGP Universal method of checking
#        "ldap://keys.(thedomain)".  For example, encrypting to
#        user@example.com will check ldap://keys.example.com.
#
# keyserver = locate a key using whatever keyserver is defined using
#             the keyserver option.
#
# You may also list arbitrary keyservers here by URL.
#
# Try CERT, then PKA, then LDAP, then hkp://subkeys.net:
auto-key-locate cert pka ldap hkp://subkeys.pgp.net


### Private keys password protection options
# Cipher algorithm
s2k-cipher-algo AES256

# Hashing algorithm
s2k-digest-algo SHA512

# Add a 8-byte salt and iterate password hash
s2k-mode 3

# Number of password hashing iterations
s2k-count 65000000


### Change defaults algorithms
# Personal symmetric algos
personal-cipher-preferences AES256 TWOFISH CAMELLIA256 AES192 CAMELLIA192 AES CAMELLIA128 BLOWFISH

# Personal hashing algos
personal-digest-preferences SHA512 SHA384 SHA256 SHA224 SHA1 RIPEMD160 MD5

# Personal compression algos
personal-compress-preferences ZLIB BZIP2 ZIP

# Default algorithms
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 TWOFISH CAMELLIA256 AES192 CAMELLIA192 AES CAMELLIA128 BLOWFISH ZLIB BZIP2 ZIP Uncompressed

# Certificate hashing algorithm
cert-digest-algo SHA512

# Minimize some attacks on subkey signing (from gpg docs)
require-cross-certification

# Get rid of version info in output files
no-emit-version
